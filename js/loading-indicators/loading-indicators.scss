/*
  CSS for shiny.ui.loading_spinners module.

  The general idea is to leverage the `recalculating` class that shiny.js adds to each
  output when it's recalculating and add a spinner to the `::after` pseudo-element.
*/

/* A reusable mixin for spinner styles */
@mixin shiny-spinner-styles {
  /* Customizable spinner properties */
  --_shiny-spinner-svg: var(--shiny-spinner-svg, url(tadpole-spinner.svg));
  --_shiny-spinner-color: var(--shiny-spinner-color, var(--bs-primary, #007bc2));
  --_shiny-spinner-size: var(--shiny-spinner-size, 40px);
  --_shiny-spinner-easing: var(--shiny-spinner-easing, ease-in-out);
  --_shiny-spinner-speed: var(--shiny-spinner-speed, 2s);
  --_shiny-spinner-delay: var(--shiny-spinner-delay, 0.25s);
  --_shiny-spinner-animation: var(--shiny-spinner-animation, shiny-loading-spinner-spin);

  position: absolute;
  inset: calc(50% - var(--_shiny-spinner-size) / 2);

  background: var(--_shiny-spinner-color);
  mask: var(--_shiny-spinner-svg) center/contain no-repeat;
  -webkit-mask: var(--_shiny-spinner-svg) center/contain no-repeat;
  width: var(--_shiny-spinner-size);
  height: var(--_shiny-spinner-size);
  content: "";

  scale: 0;
  animation-name: var(--_shiny-spinner-animation);
  animation-duration: var(--_shiny-spinner-speed);
  animation-iteration-count: infinite;
  animation-timing-function: var(--_shiny-spinner-easing);
  animation-delay: var(--_shiny-spinner-delay);
  opacity: 1;
}

[data-shiny-loading-indicator-mode="spinners"] {
  .recalculating {
    position: relative;
    /* Overlay the spinner on recalculating outputs */
    &::after {
      @include shiny-spinner-styles;
    }
    /*
      shiny.css puts `opacity: 0.3` on .recalculating, which unfortunately applies to
      the spinner. Undo that, but still apply (smaller) opacity to the content.
    */
    opacity: 1;
    > * {
      opacity: 0.2;
    }
  }

  /* If shiny is busy (say, due to a effect/observe), show a spinner in the top-right corner of the page */
  &.shiny-busy {
    position: relative;
    &::after {
      @include shiny-spinner-styles;
      inset: 1rem 1rem auto auto;
    }
  }

  /* But if has spinners elsewhere, don't show the top-right spinner */
  &.shiny-busy:has(.recalculating)::after {
    display: none;
  }

  /*
    Disable spinner on the renderUI() container for 2 reasons:
      1. .shiny-html-output has on it `display: contents` (for other reasons), which breaks the positioning of the spinner.
      2. A spinner on this container can be redundant when it contains outputs
    As a compromise, we indicate progress on the container by changing the cursor.
  */
  .shiny-html-output.recalculating {
    cursor: progress;
    &::after {
      display: none;
    }
  }

  /* Opt-out class */
  .disable-shiny-spinners .recalculating::after {
    display: none;
  }

  .disable-shiny-spinners.recalculating::after {
    display: none;
  }
}

/****************************************
In cursor mode, if the page has anything recalculating, show progress cursor
*****************************************/
[data-shiny-loading-indicator-mode="cursor"]:has(.recalculating) {
  cursor: progress;
}

/****************************************
  Keyframe that powers most spinner types
****************************************/
@keyframes shiny-loading-spinner-spin {
  0% {
    scale: 1;
    rotate: 0deg;
  }
  100% {
    scale: 1;
    rotate: 360deg;
  }
}

/* For loading_spinners.settings(type="bounce") */
@keyframes shiny-loading-spinner-bounce {
  0% {
    animation-timing-function: cubic-bezier(0.33, 0, 0.66, 0.33);
    translate: 0 calc(var(--_shiny-spinner-size) * (5 / 24));
    scale: 1 1;
  }
  46.875% {
    translate: 0 calc(var(--_shiny-spinner-size) * (20 / 24));
    scale: 1 1;
  }
  50% {
    animation-timing-function: cubic-bezier(0.33, 0.66, 0.66, 1);
    translate: 0 calc(var(--_shiny-spinner-size) * (20.5 / 24));
    scale: 1.2 0.85;
  }
  53.125% {
    scale: 1 1;
  }
  100% {
    translate: 0 calc(var(--_shiny-spinner-size) * (5 / 24));
    scale: 1 1;
  }
}
